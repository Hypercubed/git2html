#! /bin/bash

# git2html - Convert a git repository to a set of static HTML pages.
# Copyright (c) 2011 Neal H. Walfield <neal@walfield.org>
#
# git2html is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# git2html is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e
# set -x

PROJECT="Woodchuck"
# Directory containing the repository.
REPOSITORY=/home/neal/public_html/woodchuck.git

PUBLIC_REPOSITORY="http://hssl.cs.jhu.edu/~neal/woodchuck.git"
# Where to create the html pages.
TARGET=/home/neal/public_html/woodchuck/src
# List of branches for which html pages should be created.
BRANCHES="master release-0.1"

if test ! -d "$REPOSITORY"
then
  echo "Repository $REPOSITORY does not exists.  Misconfiguration likely."
  exit 1
fi

html_header()
{
  title="$1"
  top_level="$2"

  if test x"$PROJECT" != x -a x"$title" != x
  then
    # Title is not the empty string.  Prefix it with ": "
    title=": $title"
  fi

  echo "<html><head><title>$PROJECT$title</title></head>" \
    "<body>" \
    "<h1><a href=\"$top_level\">$PROJECT</a>$title</h1>"
}

html_footer()
{
  echo "<hr>" \
    "Generated by" \
    "<a href=\"http://hssl.cs.jhu.edu/~neal/git2html\">git2html</a>."
}

# Ensure that some directories we need exist.
mkdir -p "$TARGET"
if test ! -d "$TARGET/objects"
then
  mkdir "$TARGET/objects"
fi

if test ! -e "$TARGET/commits"
then
  mkdir "$TARGET/commits"
fi

if test ! -e "$TARGET/branches"
then
  mkdir "$TARGET/branches"
fi

# Get an up-to-date copy of the repository.
if test ! -e "$TARGET/repository"
then
  # Clone the repository.
  git clone $REPOSITORY "$TARGET/repository"
else
  # Update the repository.
  cd "$TARGET/repository"
  git pull
fi

# For each branch and each commit create and extract an archive of the form
#   $TARGET/commits/$commit
#
# and a link:
#
#   $TARGET/branches/$commit -> $TARGET/commits/$commit

# Count the number of branch we want to process to improve reporting.
bcount=0
for branch in $BRANCHES
do
  let ++bcount
done

INDEX="$TARGET/index.html"

{
  html_header
  echo "<h2>Repository</h2>" \
    "Clone this repository using:" \
    "<pre>" \
    " git clone $PUBLIC_REPOSITORY" \
    "</pre>" \
    "<h3>Branches</h3>" \
    "<ul>"
} > "$INDEX"

b=0
for branch in $BRANCHES
do
  let ++b

  cd "$REPOSITORY"

  # Count the number of commits on this branch to improve reporting.
  ccount=$(git rev-list $branch | wc -l)

  echo "Branch $branch ($b/$bcount): processing ($ccount commits)."

  BRANCH_INDEX="$TARGET/branches/$branch.html"

  c=0
  git rev-list --topo-order $branch | while read commit
  do
    let ++c
    echo "Commit $commit ($c/$ccount): processing."

    # Extract metadata about this commit.
    metadata=$(git log -n 1 --pretty=raw $commit \
        | sed 's#<#\&lt;#g; s#>#\&gt;#g; ')
    parent=$(echo "$metadata" \
	| gawk '/^parent / { $1=""; sub (" ", ""); print $0 }')
    committer=$(echo "$metadata" \
	| gawk '/^committer / { NF=NF-2; $1=""; sub(" ", ""); print $0 }')
    date=$(echo "$metadata" | gawk '/^committer / { print $(NF=NF-1); }')
    date=$(date -u -d "1970-01-01 $date sec")
    log=$(echo "$metadata" | gawk '/^    / { print $0; exit }')
    loglong=$(echo "$metadata" | gawk '/^    / { print $0; }')

    if test "$c" = "1"
    then
      # This commit is the current head of the branch.

      # Update the branch's link.
      ln -sf "../commits/$commit" "$TARGET/branches/$branch"

      # Update the project's index.html and the branch's index.html.
      echo "<li><a href=\"branches/$branch.html\">$branch</a> " \
        "$log $committer $date" >> "$INDEX"

      {
        html_header "Branch: $branch" ".."
        echo "<ul>"
      } > "$BRANCH_INDEX"
    fi

    # Add this commit to the branch's index.html.
    echo "<li><a href=\"../commits/$commit\">$log</a>: $committer $date" \
	>> "$BRANCH_INDEX"


    # Commits don't change.  If the directory already exists, it is up
    # to date and we can save some work.
    COMMIT_BASE="$TARGET/commits/$commit"
    if test -e "$COMMIT_BASE"
    then
      echo "Commit $commit ($c/$ccount): already processed."
      continue
    fi

    mkdir "$COMMIT_BASE"

    # Get the list of files in this commit.
    FILES=$(mktemp)
    git ls-tree -r "$commit" > "$FILES"

    # Create the commit's index.html: the metadata, a summary of the changes
    # and a list of all the files.
    COMMIT_INDEX="$COMMIT_BASE/index.html"
    {
      html_header "Commit: $commit" "../.."

      # The metadata.
      echo "<h2>Branch: <a href=\"../../branches/$branch.html\">$branch</a></h2>" \
	"<p>Committer: $committer" \
	"<br>Date: $date" \
	"<br>Parent: <a href=\"../../commits/$parent\">$parent</a>" \
	" (<a href=\"../../commits/$commit/diff-to-parent.html\">diff to parent</a>)" \
	"<br>Log message:" \
	"<p><pre>$loglong</pre>" \
	"<br>Diff Stat:" \
	"<blockquote><pre>"
      git diff --stat $commit..$parent \
        | gawk '{ if (last_line) print last_line;
                  last_line_raw=$0;
                  $1=sprintf("<a href=\""$1".raw.html\">"$1"</a>%*s" \
                             "(<a href=\"diff-to-parent.html#%s\">diff</a>)",
                             60 - length ($1), " ", $1);
                  last_line=$0; }
                END { print last_line_raw; }'
      echo "</pre></blockquote>" \
	"<p>Files:" \
        "<ul>"
      # The list of files as a hierarchy.
      gawk 'function spaces(l) {
             for (space = 1; space <= l; space ++) { printf ("  "); }
           }
           function max(a, b) { if (a > b) { return a; } return b; }
           function min(a, b) { if (a < b) { return a; } return b; }
           BEGIN {
             current_components[1] = "";
             delete current_components[1];
           }
           {
             file=$4;
             split(file, components, "/")
             # Remove the file.  Keep the directories.
             file=components[length(components)]
             delete components[length(components)];
  
             # See if a path component changed.
             for (i = 1;
                  i <= min(length(components), length(current_components));
                  i ++)
             {
               if (current_components[i] != components[i])
               # It did.
               {
                 last=length(current_components);
                 for (j = last; j >= i; j --)
                 {
                   spaces(j);
                   printf ("</ul> <!-- %s -->\n", current_components[j]);
                   delete current_components[j];
                 }
               }
             }
  
             # See if there are new path components.
             for (; i <= length(components); i ++)
             {
                 current_components[i] = components[i];
                 spaces(i);
                 printf("<li>%s\n", components[i]);
                 spaces(i);
                 printf("<ul>\n");
             }
  
             spaces(length(current_components))
             printf ("<li><a href=\"%s.raw.html\">%s</a>\n", $4, file);
           }' < "$FILES"

      echo "</ul>"
      html_footer
    } > "$COMMIT_INDEX"

    # Create the commit's diff-to-parent.html file.
    {
      html_header "diff $(echo $commit | sed 's/^\(.\{8\}\).*/\1/') $(echo $parent | sed 's/^\(.\{8\}\).*/\1/')" "../.."
      echo "<h2>Branch: <a href=\"../../branches/$branch.html\">$branch</a></h2>" \
        "<h3>Commit: <a href=\"index.html\">$commit</a></h3>" \
	"<p>Committer: $committer" \
	"<br>Date: $date" \
	"<br>Parent: <a href=\"../$parent\">$parent</a>" \
	"<br>Log message:" \
	"<p><pre>$loglong</pre>" \
	"<p>" \
        "<pre>"
      git diff $commit..$parent \
        | sed 's#<#\&lt;#g; s#>#\&gt;#g; ' \
	| gawk '/^diff --git/ {
                  file=$3;
                  sub (/^a\//, "", file);
                  $3=sprintf("<a name=\"%s\">%s</a>", file, $3);
                }
                { ++line; printf("%5d: %s\n", line, $0); }'
      echo "</pre>"
      html_footer
    } > "$COMMIT_BASE/diff-to-parent.html"


    # For each file in the commit, ensure the object exists.
    while read line
    do
      file_base=$(echo "$line" | gawk '{ print $4 }')
      file="$TARGET/commits/$commit/$file_base"
      sha=$(echo "$line" | gawk '{ print $3 }')

      object_dir="$TARGET/objects/"$(echo "$sha" \
	  | sed 's#^\([a-f0-9]\{2\}\).*#\1#')
      object="$object_dir/$sha"

      if test ! -e "$object"
      then
        # File does not yet exists in the object repository.
        # Create it.
	if test ! -d "$object_dir"
	then
	  mkdir "$object_dir"
	fi

        # The object's file should not be commit or branch specific:
        # the same html is shared among all files with the same
        # content.
        {
          html_header "$sha"
          echo "<pre>"
          git show "$sha" \
            | sed 's#<#\&lt;#g; s#>#\&gt;#g; ' \
            | gawk '{ ++line; printf("%5d: %s\n", line, $0); }'
          echo "</pre>"
          html_footer
        } > "$object"
      fi

      # Create a hard link to the file in the object repository.
      mkdir -p $(dirname "$file")
      ln "$object" "$file.raw.html"
    done <"$FILES"
    rm "$FILES"
  done

  {
    echo "</ul>"
    html_footer
  } >> "$BRANCH_INDEX"
done

{
  echo "</ul>"
  html_footer
} >> "$INDEX"

